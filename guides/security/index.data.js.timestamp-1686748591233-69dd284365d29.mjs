// @external/guides/security/index.data.js
import { basename } from "node:path";
import { createContentLoader } from "file:///Users/d031461/work/capire/node_modules/vitepress/dist/node/index.js";

// @external/.vitepress/theme/components/indexFilter.js
import { join } from "node:path";
var { base, themeConfig: { sidebar } } = global.VITEPRESS_CONFIG.site;
var indexFilter_default = (pages, basePath2) => {
  let items = findInItems(basePath2, sidebar) || [];
  items = items.map((item) => {
    return { ...item, link: item.link.replace(/\.md$/, "") };
  });
  const itemLinks = items.map((item) => item.link);
  return pages.map((p) => {
    p.url = p.url.replaceAll("@external/", "").replace(/\/index$/, "/");
    return p;
  }).filter((p) => {
    const item = items.find((item2) => p.url.endsWith(item2.link));
    if (item)
      p.title = item.text;
    return !!item;
  }).sort((p1, p2) => itemLinks.indexOf(p1.url) - itemLinks.indexOf(p2.url)).map((p) => {
    return {
      url: join(base, p.url),
      title: p.title,
      frontmatter: {
        synopsis: p.frontmatter.synopsis
      }
    };
  });
};
function findInItems(url, items = []) {
  let res = items.find((item) => {
    var _a;
    return (_a = item.link) == null ? void 0 : _a.includes(url);
  });
  if (res)
    return res.items;
  for (const item of items) {
    res = findInItems(url, item.items);
    if (res)
      return res;
  }
}

// @external/guides/security/index.data.js
var __vite_injected_original_dirname = "/Users/d031461/work/capire/@external/guides/security";
var basePath = basename(__vite_injected_original_dirname);
var index_data_default = createContentLoader(`**/${basePath}/*.md`, {
  transform(rawData) {
    return indexFilter_default(rawData, `/${basePath}/`);
  }
});
export {
  index_data_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiQGV4dGVybmFsL2d1aWRlcy9zZWN1cml0eS9pbmRleC5kYXRhLmpzIiwgIkBleHRlcm5hbC8udml0ZXByZXNzL3RoZW1lL2NvbXBvbmVudHMvaW5kZXhGaWx0ZXIuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvZDAzMTQ2MS93b3JrL2NhcGlyZS9AZXh0ZXJuYWwvZ3VpZGVzL3NlY3VyaXR5XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvZDAzMTQ2MS93b3JrL2NhcGlyZS9AZXh0ZXJuYWwvZ3VpZGVzL3NlY3VyaXR5L2luZGV4LmRhdGEuanNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2QwMzE0NjEvd29yay9jYXBpcmUvQGV4dGVybmFsL2d1aWRlcy9zZWN1cml0eS9pbmRleC5kYXRhLmpzXCI7aW1wb3J0IHsgYmFzZW5hbWUgfSBmcm9tICdub2RlOnBhdGgnXG5pbXBvcnQgeyBjcmVhdGVDb250ZW50TG9hZGVyIH0gZnJvbSAndml0ZXByZXNzJ1xuaW1wb3J0IGZpbHRlciBmcm9tICcuLi8uLi8udml0ZXByZXNzL3RoZW1lL2NvbXBvbmVudHMvaW5kZXhGaWx0ZXIuanMnXG5cbmNvbnN0IGJhc2VQYXRoID0gYmFzZW5hbWUoX19kaXJuYW1lKVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb250ZW50TG9hZGVyKGAqKi8ke2Jhc2VQYXRofS8qLm1kYCwge1xuICB0cmFuc2Zvcm0ocmF3RGF0YSkge1xuICAgIHJldHVybiBmaWx0ZXIocmF3RGF0YSwgYC8ke2Jhc2VQYXRofS9gKVxuICB9XG59KVxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvZDAzMTQ2MS93b3JrL2NhcGlyZS9AZXh0ZXJuYWwvLnZpdGVwcmVzcy90aGVtZS9jb21wb25lbnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvZDAzMTQ2MS93b3JrL2NhcGlyZS9AZXh0ZXJuYWwvLnZpdGVwcmVzcy90aGVtZS9jb21wb25lbnRzL2luZGV4RmlsdGVyLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9kMDMxNDYxL3dvcmsvY2FwaXJlL0BleHRlcm5hbC8udml0ZXByZXNzL3RoZW1lL2NvbXBvbmVudHMvaW5kZXhGaWx0ZXIuanNcIjtjb25zdCB7IGJhc2UsIHRoZW1lQ29uZmlnOiB7IHNpZGViYXIgfX0gPSBnbG9iYWwuVklURVBSRVNTX0NPTkZJRy5zaXRlXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAnbm9kZTpwYXRoJ1xuXG5leHBvcnQgZGVmYXVsdCAocGFnZXMsIGJhc2VQYXRoKSA9PiB7XG4gIGxldCBpdGVtcyA9IGZpbmRJbkl0ZW1zKGJhc2VQYXRoLCBzaWRlYmFyKSB8fCBbXVxuICBpdGVtcyA9IGl0ZW1zLm1hcChpdGVtID0+IHsgcmV0dXJuIHsgLi4uaXRlbSwgbGluazogaXRlbS5saW5rLnJlcGxhY2UoL1xcLm1kJC8sICcnKSB9fSlcbiAgY29uc3QgaXRlbUxpbmtzID0gaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5saW5rKVxuXG4gIHJldHVybiBwYWdlc1xuICAgIC5tYXAocCA9PiB7XG4gICAgICBwLnVybCA9IHAudXJsLnJlcGxhY2VBbGwoJ0BleHRlcm5hbC8nLCAnJykucmVwbGFjZSgvXFwvaW5kZXgkLywgJy8nKVxuICAgICAgcmV0dXJuIHBcbiAgICB9KVxuICAgIC5maWx0ZXIocCA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gaXRlbXMuZmluZChpdGVtID0+IHAudXJsLmVuZHNXaXRoKGl0ZW0ubGluaykpXG4gICAgICBpZiAoaXRlbSkgIHAudGl0bGUgPSBpdGVtLnRleHRcbiAgICAgIHJldHVybiAhIWl0ZW1cbiAgICB9KVxuICAgIC5zb3J0KChwMSwgcDIpID0+IGl0ZW1MaW5rcy5pbmRleE9mKHAxLnVybCkgLSBpdGVtTGlua3MuaW5kZXhPZihwMi51cmwpKVxuICAgIC5tYXAocCA9PiB7XG4gICAgICAvLyB0aGlzIGRhdGEgaXMgaW5saW5lZCBpbiBlYWNoIGluZGV4IHBhZ2UsIHNvIHNwYXJzZWx5IGNvbnN0cnVjdCB0aGUgZmluYWwgb2JqZWN0XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmwgOiBqb2luKGJhc2UsIHAudXJsKSxcbiAgICAgICAgdGl0bGU6IHAudGl0bGUsXG4gICAgICAgIGZyb250bWF0dGVyOiB7XG4gICAgICAgICAgc3lub3BzaXM6IHAuZnJvbnRtYXR0ZXIuc3lub3BzaXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGZpbmRJbkl0ZW1zKHVybCwgaXRlbXM9W10pIHtcbiAgbGV0IHJlcyA9IGl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmxpbms/LmluY2x1ZGVzKHVybCkpXG4gIGlmIChyZXMpICByZXR1cm4gcmVzLml0ZW1zXG4gIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgIHJlcyA9IGZpbmRJbkl0ZW1zKHVybCwgaXRlbS5pdGVtcylcbiAgICBpZiAocmVzKSAgcmV0dXJuIHJlc1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQTRVLFNBQVMsZ0JBQWdCO0FBQ3JXLFNBQVMsMkJBQTJCOzs7QUNBcEMsU0FBUyxZQUFZO0FBRDZWLElBQU0sRUFBRSxNQUFNLGFBQWEsRUFBRSxRQUFRLEVBQUMsSUFBSSxPQUFPLGlCQUFpQjtBQUdwYixJQUFPLHNCQUFRLENBQUMsT0FBT0EsY0FBYTtBQUNsQyxNQUFJLFFBQVEsWUFBWUEsV0FBVSxPQUFPLEtBQUssQ0FBQztBQUMvQyxVQUFRLE1BQU0sSUFBSSxVQUFRO0FBQUUsV0FBTyxFQUFFLEdBQUcsTUFBTSxNQUFNLEtBQUssS0FBSyxRQUFRLFNBQVMsRUFBRSxFQUFFO0FBQUEsRUFBQyxDQUFDO0FBQ3JGLFFBQU0sWUFBWSxNQUFNLElBQUksVUFBUSxLQUFLLElBQUk7QUFFN0MsU0FBTyxNQUNKLElBQUksT0FBSztBQUNSLE1BQUUsTUFBTSxFQUFFLElBQUksV0FBVyxjQUFjLEVBQUUsRUFBRSxRQUFRLFlBQVksR0FBRztBQUNsRSxXQUFPO0FBQUEsRUFDVCxDQUFDLEVBQ0EsT0FBTyxPQUFLO0FBQ1gsVUFBTSxPQUFPLE1BQU0sS0FBSyxDQUFBQyxVQUFRLEVBQUUsSUFBSSxTQUFTQSxNQUFLLElBQUksQ0FBQztBQUN6RCxRQUFJO0FBQU8sUUFBRSxRQUFRLEtBQUs7QUFDMUIsV0FBTyxDQUFDLENBQUM7QUFBQSxFQUNYLENBQUMsRUFDQSxLQUFLLENBQUMsSUFBSSxPQUFPLFVBQVUsUUFBUSxHQUFHLEdBQUcsSUFBSSxVQUFVLFFBQVEsR0FBRyxHQUFHLENBQUMsRUFDdEUsSUFBSSxPQUFLO0FBRVIsV0FBTztBQUFBLE1BQ0wsS0FBTSxLQUFLLE1BQU0sRUFBRSxHQUFHO0FBQUEsTUFDdEIsT0FBTyxFQUFFO0FBQUEsTUFDVCxhQUFhO0FBQUEsUUFDWCxVQUFVLEVBQUUsWUFBWTtBQUFBLE1BQzFCO0FBQUEsSUFDRjtBQUFBLEVBQ0YsQ0FBQztBQUNMO0FBRUEsU0FBUyxZQUFZLEtBQUssUUFBTSxDQUFDLEdBQUc7QUFDbEMsTUFBSSxNQUFNLE1BQU0sS0FBSyxVQUFLO0FBaEM1QjtBQWdDK0Isc0JBQUssU0FBTCxtQkFBVyxTQUFTO0FBQUEsR0FBSTtBQUNyRCxNQUFJO0FBQU0sV0FBTyxJQUFJO0FBQ3JCLGFBQVcsUUFBUSxPQUFPO0FBQ3hCLFVBQU0sWUFBWSxLQUFLLEtBQUssS0FBSztBQUNqQyxRQUFJO0FBQU0sYUFBTztBQUFBLEVBQ25CO0FBQ0Y7OztBRHRDQSxJQUFNLG1DQUFtQztBQUl6QyxJQUFNLFdBQVcsU0FBUyxnQ0FBUztBQUVuQyxJQUFPLHFCQUFRLG9CQUFvQixNQUFNLGlCQUFpQjtBQUFBLEVBQ3hELFVBQVUsU0FBUztBQUNqQixXQUFPLG9CQUFPLFNBQVMsSUFBSSxXQUFXO0FBQUEsRUFDeEM7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogWyJiYXNlUGF0aCIsICJpdGVtIl0KfQo=
